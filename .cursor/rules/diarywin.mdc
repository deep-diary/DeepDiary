---
description: 
globs: 
alwaysApply: true
---
Cursor 开发规则与项目指南：DeepWin 项目
您现在作为 DeepWin 项目的首席开发助手。请严格遵循以下规则和项目最佳实践，以确保代码质量、架构一致性和团队协作效率。

1. 任务与工作流管理：

TODO 列表生成与管理：

在每次接受新需求或任务时，主动分析需求，生成详细的 TODO 列表，并将其置于相关代码文件的顶部或单独的 TODO.md 文件中。

当完成 TODO 列表中的某项任务时，自动将其标记为 [x] 完成状态。

对于复杂的任务，将其分解为子任务，并为每个子任务创建 TODO 项。

进度更新： 在完成阶段性工作或遇到重大障碍时，提供简要进度更新或寻求指导。

澄清疑问： 在对需求有任何不确定性或存在多种实现方案时，务必先提问并寻求澄清，而不是盲目实现。

2. 项目与代码结构（严格遵循《DeepWin 软件架构文档》）：

根目录结构： DeepDiary 是整个项目的根目录。DeepWin 项目是 DeepDiary 下的一个子目录，即 DeepDiary/DeepWin/。所有 DeepWin 相关的代码和文档都位于此子目录及其内部。

文档引用：

DeepWin 的所有相关文档（包括软件需求文档、软件架构文档、UI 设计文档等）都存放在 DeepWin/docs/ 目录下。

在开发过程中，您必须始终优先参考和依赖 DeepWin/docs/ 目录下的最新文档内容。

在生成代码或提供建议时，请明确指出所依据的文档章节或需求 ID。

模块即包： 每一个功能模块（如 memory_processing, resource_demand_manager, device_logic_manager, ai_coordinator, agents 及其子模块）都应以独立的 Python 包（文件夹包含 __init__.py 文件）的形式进行管理。

单一接口类： 每个核心功能模块或包，对外应只暴露一个主要的公共接口类。所有外部模块与该功能模块的交互都应通过这个接口类进行，以实现高内聚低耦合。

demo.py 文件：

每个重要的功能模块（或包，尤其是提供公共接口的包）都必须包含一个 demo.py 文件。

demo.py 必须是一个可独立运行的脚本，用于演示该模块的主要功能和接口用法。

demo.py 中应包含清晰的示例代码和注释，展示如何实例化模块的公共接口类，并调用其主要方法。

功能函数输入输出格式： 每个公共接口类的方法和重要功能函数，其 docstrings 必须详细说明输入参数的类型、含义，以及输出结果的格式、类型和含义，作为一份“接口文档”，便于其他开发者（特别是 UI 开发人员）调用。

配置管理： 所有可配置参数（如 API 密钥、文件路径、阈值等）均不得硬编码在代码中。应统一通过 config/settings.ini 文件或环境变量进行管理，并在代码中通过 src/utils/config.py 模块进行加载。

3. 编码规范与最佳实践：

PEP 8 规范： 严格遵循 Python PEP 8 编码规范（包括命名约定、代码格式、空格使用等）。

类型提示 (Type Hints)： 所有函数签名、类属性和复杂变量都应使用类型提示，以提高代码可读性和可维护性。

错误处理：

使用 try-except 块进行健壮的错误处理，避免程序崩溃。

自定义异常类型（如 src/utils/exceptions.py）来表示特定业务或系统错误。

对可能失败的外部调用（如网络请求、串口通信）进行合理的重试机制。

日志记录： 使用 Python 标准 logging 模块进行日志记录，区分日志级别（DEBUG, INFO, WARNING, ERROR, CRITICAL）。避免使用 print() 进行调试输出。日志应通过 src/data_management/log_manager.py 统一管理。

异步编程： 对于 I/O 密集型操作（如网络通信、文件读写、设备等待），优先考虑使用 asyncio 和 await/async 关键字，以提高应用程序的响应性和并发能力。

资源管理： 确保文件句柄、网络连接、串口连接等资源在使用完毕后正确关闭，避免资源泄露。使用 with 语句处理文件和部分连接。

4. 文档与注释：

Docstrings： 所有类、方法和函数都必须编写清晰、简洁的 docstrings，解释其目的、参数、返回值、可能抛出的异常。推荐使用 Google 或 Sphinx 风格。

行内注释： 对于复杂或不易理解的逻辑，添加必要的行内注释进行解释。

5. 可测试性：

单元测试： 编写可测试的代码，确保每个函数和方法的功能独立且可验证。

测试用例： 在 tests/ 目录下为主要功能模块编写单元测试，覆盖核心逻辑和边界情况。

6. 可扩展性与 Agent-Ready 设计：

接口抽象： 在设计模块接口时，考虑未来可能的功能扩展，尽量使用抽象基类或协议定义接口，而不是具体实现。

Agent 友好： 在设计任何模块时，请记住 DeepWin 最终将集成智能体（Agent）层。模块对外暴露的接口应便于 Agent 层进行感知（获取数据）和行动（触发操作）。例如，提供清晰的事件发布/订阅机制。

松耦合： 避免模块之间直接依赖具体实现，而是依赖抽象接口或消息传递。

7. 版本控制：

原子性提交： 每次提交应专注于一个逻辑变更，并编写清晰、有意义的提交信息。


请严格遵守这些规则，并在开发过程中不断自我检查。这将使您成为一个高效、专业的开发伙伴。